{"ast":null,"code":"var _jsxFileName = \"/Users/kyle.snow/repos/spotify_recommendation_engine/spotify-rec-app/src/Analyze.js\";\nimport React, { useEffect, useState, handleChange } from \"react\";\nimport logo from \"./images/logo.svg\";\nimport search_icon from \"./images/search-icon.png\";\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { fromFetch } from 'rxjs/fetch';\nimport { of } from 'rxjs'; // STORE\n// import { store } from 'react-recollect';\n//\n// const storedData = JSON.parse(localStorage.getItem('store'));\n// store.searchResults = storedData\n//   ? storedData.searchResults\n//   : {\n//     name: null,\n//     followers: null,\n//     genres: null,\n//   };\n\nfunction Artist(props) {\n  const currentResult = props.currentResult; // ATTEMPTING TO REPLACE WITH STORE\n  //const currentResult = store.searchResults\n\n  if (currentResult === null || currentResult === void 0 ? void 0 : currentResult.name) {\n    const genres = currentResult.genres.map((genre, index) => /*#__PURE__*/React.createElement(\"p\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, \" \", genre, \" \"));\n    const image_url = currentResult.images[0].url; // const images = currentResult.images.map((image, index) =>\n    //   <p key={index}> {image} </p>\n    // )\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"Artist Name: \", currentResult.name), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"Followers: \", currentResult.followers), genres, /*#__PURE__*/React.createElement(\"img\", {\n      src: image_url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, \"No artist entered.\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\nfunction Analyze() {\n  const [currentSearch, setSearch] = useState('');\n  const [currentResult, setResult] = useState({});\n\n  const handleChange = event => {\n    const search = event.target.value;\n    setSearch(search);\n  };\n\n  useEffect(() => {\n    fetchArtist();\n  }, [currentSearch]); // CURRENT\n  // const fetchArtist = () => {\n  //   fetch('/api/analyze?artist='+currentSearch)\n  //     .then(res => res.json())\n  //     .then(data => {\n  //     setResult({\n  //       name: data.name,\n  //       followers: data.followers,\n  //       genres: data.genres,\n  //       images: data.images,\n  //     });\n  //     })\n  // }\n\n  const fetchArtist = () => {\n    const data$ = fromFetch('/api/analyze?artist=' + currentSearch, {\n      selector: res => res.json()\n    }).pipe(switchMap(res => {\n      if (res.ok) {\n        res.json().then(data => {\n          setResult({\n            name: data.name,\n            followers: data.followers,\n            genres: data.genres,\n            images: data.images\n          });\n        });\n      } else {\n        return of({\n          error: true,\n          message: `Error ${res.status}`\n        });\n      }\n    }) // catchError(err => {\n    //   console.error(err);\n    //   return of({error: true, message: err.message})\n    // })\n    );\n    data$.subscribe({\n      next: result => console.log(result),\n      complete: () => console.log('done')\n    });\n  }; // ATTEMPTING TO REPLACE WITH STORE...\n  // const fetchArtist = () => {\n  //   fetch('/api/analyze?artist='+currentSearch)\n  //     .then(res => res.json())\n  //     .then(data => {\n  //     store.searchResults = data;\n  //     })\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"analyze\",\n    className: \"page-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"search-span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"search\",\n    className: \"search-box\",\n    id: \"artist-search\",\n    src: \"search_icon\",\n    placeholder: \"Search Artist\",\n    value: currentSearch,\n    autoComplete: \"off\",\n    spellCheck: \"false\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Artist, {\n    currentResult: currentResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }));\n}\n\n;\nexport default Analyze;","map":{"version":3,"sources":["/Users/kyle.snow/repos/spotify_recommendation_engine/spotify-rec-app/src/Analyze.js"],"names":["React","useEffect","useState","handleChange","search_icon","switchMap","catchError","fromFetch","of","Artist","props","currentResult","name","genres","map","genre","index","image_url","images","url","followers","logo","Analyze","currentSearch","setSearch","setResult","event","search","target","value","fetchArtist","data$","selector","res","json","pipe","ok","then","data","error","message","status","subscribe","next","result","console","log","complete"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, handleChange } from \"react\";\nimport logo from \"./images/logo.svg\";\nimport search_icon from \"./images/search-icon.png\";\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { fromFetch } from 'rxjs/fetch';\nimport { of } from 'rxjs';\n\n// STORE\n// import { store } from 'react-recollect';\n//\n// const storedData = JSON.parse(localStorage.getItem('store'));\n// store.searchResults = storedData\n//   ? storedData.searchResults\n//   : {\n//     name: null,\n//     followers: null,\n//     genres: null,\n//   };\n\nfunction Artist(props) {\n  const currentResult = props.currentResult\n  \n  // ATTEMPTING TO REPLACE WITH STORE\n  //const currentResult = store.searchResults\n  \n  if (currentResult?.name) {\n    \n    const genres = currentResult.genres.map((genre, index) =>\n      <p key={index}> {genre} </p>\n    )\n    \n    const image_url = currentResult.images[0].url\n    \n    // const images = currentResult.images.map((image, index) =>\n    //   <p key={index}> {image} </p>\n    // )\n    \n    return (\n      <div>\n        <p>Artist Name: {currentResult.name}</p>\n        <p>Followers: {currentResult.followers}</p>\n        {genres}\n        <img src={image_url} />\n      </div>\n\n      )\n  } else {\n    return(\n      <div>\n        <p>No artist entered.</p>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </div>\n    )\n  }\n}\n\n\nfunction Analyze() {\n  \n  const [currentSearch, setSearch] = useState('');\n  const [currentResult, setResult] = useState({});\n  \n  const handleChange = event => {\n    const search = event.target.value\n    setSearch(search);\n  }\n  \n  useEffect(() => {\n    fetchArtist()\n  }, [currentSearch]);\n  \n  // CURRENT\n  // const fetchArtist = () => {\n  //   fetch('/api/analyze?artist='+currentSearch)\n  //     .then(res => res.json())\n  //     .then(data => {\n  //     setResult({\n  //       name: data.name,\n  //       followers: data.followers,\n  //       genres: data.genres,\n  //       images: data.images,\n  //     });\n  //     })\n  // }\n  \n  const fetchArtist = () => {\n    const data$ = fromFetch('/api/analyze?artist=' + currentSearch, {\n      selector: res => res.json()\n    }).pipe(\n      switchMap(res => {\n        if (res.ok) {\n          res.json().then(data => {\n            setResult({\n              name: data.name,\n              followers: data.followers,\n              genres: data.genres,\n              images: data.images,\n            });\n          })\n        } else {\n          return of({error: true, message: `Error ${res.status}`});\n        }\n      }),\n      // catchError(err => {\n      //   console.error(err);\n      //   return of({error: true, message: err.message})\n      // })\n    );\n    \n    data$.subscribe({\n      next: result => console.log(result),\n      complete: () => console.log('done')\n    });\n  }\n  \n  // ATTEMPTING TO REPLACE WITH STORE...\n  // const fetchArtist = () => {\n  //   fetch('/api/analyze?artist='+currentSearch)\n  //     .then(res => res.json())\n  //     .then(data => {\n  //     store.searchResults = data;\n  //     })\n  // }\n\n  return (\n    <div id=\"analyze\" className=\"page-body\">\n      <span className=\"search-span\">\n        <input type=\"search\"\n               className=\"search-box\"\n               id=\"artist-search\"\n               src={\"search_icon\"}\n               placeholder=\"Search Artist\"\n               value={currentSearch}\n               autoComplete=\"off\"\n               spellCheck=\"false\"\n               onChange={handleChange}\n        />\n      </span>\n      <Artist currentResult={currentResult} />\n    </div>\n  );\n};\n\n\nexport default Analyze;"]},"metadata":{},"sourceType":"module"}