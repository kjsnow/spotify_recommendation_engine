{"ast":null,"code":"import { LS_KEYS } from './constants.js';\nimport state$1 from './state.js';\nimport { getValue } from './utils.js';\nimport { extendToUserString, internalToUser } from './paths.js';\nimport { get, set } from './ls.js';\nconst DEBUG_ON = 'on';\nconst DEBUG_OFF = 'off';\nlet DEBUG = get(LS_KEYS.RR_DEBUG) || DEBUG_OFF;\n\nif (DEBUG === DEBUG_ON) {\n  console.info('Recollect debugging is enabled. Type __RR__.debugOff() to turn it off.');\n}\n\nconst debugOn = () => {\n  DEBUG = DEBUG_ON;\n  set(LS_KEYS.RR_DEBUG, DEBUG_ON);\n};\n\nconst debugOff = () => {\n  DEBUG = DEBUG_OFF;\n  set(LS_KEYS.RR_DEBUG, DEBUG_OFF);\n};\n\nconst debug = cb => {\n  if (DEBUG === DEBUG_ON) cb();\n};\n\nconst logGet = (target, prop, value) => {\n  debug(() => {\n    console.groupCollapsed(`GET: ${extendToUserString(target, prop)}`);\n    console.info(`Component: <${state$1.currentComponent._name}>`);\n\n    if (typeof value !== 'undefined') {\n      console.info('Value:', value);\n    }\n\n    console.groupEnd();\n  });\n};\n\nconst logSet = (target, prop, value) => {\n  debug(() => {\n    console.groupCollapsed(`SET: ${extendToUserString(target, prop)}`);\n    console.info('From:', getValue(target, prop));\n    console.info('To:  ', value);\n    console.groupEnd();\n  });\n};\n\nconst logDelete = (target, prop) => {\n  debug(() => {\n    console.groupCollapsed(`DELETE: ${extendToUserString(target, prop)}`);\n    console.info('Property: ', extendToUserString(target, prop));\n    console.groupEnd();\n  });\n};\n\nconst logUpdate = (component, propsUpdated) => {\n  debug(() => {\n    console.groupCollapsed(`UPDATE:  <${component._name}>`);\n    console.info('Changed properties:', propsUpdated);\n    console.groupEnd();\n  });\n};\n\nconst getComponentsAndListeners = (componentFirst, matcher, makeName) => {\n  const result = {};\n  Array.from(state$1.listeners).forEach(([path, componentSet]) => {\n    componentSet.forEach(component => {\n      var _a;\n\n      let componentName = component._name;\n\n      if (makeName) {\n        componentName += (_a = makeName(component.props)) !== null && _a !== void 0 ? _a : '';\n      }\n\n      const userPath = internalToUser(path);\n      const prop = componentFirst ? componentName : userPath;\n      const value = componentFirst ? userPath : componentName;\n      if (matcher && !prop.match(matcher)) return;\n      if (!result[prop]) result[prop] = [];\n      if (!result[prop].includes(value)) result[prop].push(value);\n    });\n  });\n  return result;\n};\n/**\r\n * Return an object where the keys are component names and the values are\r\n * arrays of the store properties the component is subscribed to\r\n */\n\n\nconst getListenersByComponent = (matcher, makeName) => getComponentsAndListeners(true, matcher, makeName);\n/**\r\n * Return an object where the keys are store properties and the values are\r\n * the names of the components that listen to the property\r\n */\n\n\nconst getComponentsByListener = (matcher, makeName) => getComponentsAndListeners(false, matcher, makeName);\n\nexport { debug, debugOff, debugOn, getComponentsByListener, getListenersByComponent, logDelete, logGet, logSet, logUpdate };","map":{"version":3,"sources":["/Users/kyle.snow/node_modules/react-recollect/dist/esm/development/shared/debug.js"],"names":["LS_KEYS","state$1","getValue","extendToUserString","internalToUser","get","set","DEBUG_ON","DEBUG_OFF","DEBUG","RR_DEBUG","console","info","debugOn","debugOff","debug","cb","logGet","target","prop","value","groupCollapsed","currentComponent","_name","groupEnd","logSet","logDelete","logUpdate","component","propsUpdated","getComponentsAndListeners","componentFirst","matcher","makeName","result","Array","from","listeners","forEach","path","componentSet","_a","componentName","props","userPath","match","includes","push","getListenersByComponent","getComponentsByListener"],"mappings":"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","sourcesContent":["import { LS_KEYS } from './constants.js';\nimport state$1 from './state.js';\nimport { getValue } from './utils.js';\nimport { extendToUserString, internalToUser } from './paths.js';\nimport { get, set } from './ls.js';\n\nconst DEBUG_ON = 'on';\r\nconst DEBUG_OFF = 'off';\r\nlet DEBUG = get(LS_KEYS.RR_DEBUG) || DEBUG_OFF;\r\nif (DEBUG === DEBUG_ON) {\r\n    console.info('Recollect debugging is enabled. Type __RR__.debugOff() to turn it off.');\r\n}\r\nconst debugOn = () => {\r\n    DEBUG = DEBUG_ON;\r\n    set(LS_KEYS.RR_DEBUG, DEBUG_ON);\r\n};\r\nconst debugOff = () => {\r\n    DEBUG = DEBUG_OFF;\r\n    set(LS_KEYS.RR_DEBUG, DEBUG_OFF);\r\n};\r\nconst debug = (cb) => {\r\n    if (DEBUG === DEBUG_ON)\r\n        cb();\r\n};\r\nconst logGet = (target, prop, value) => {\r\n    debug(() => {\r\n        console.groupCollapsed(`GET: ${extendToUserString(target, prop)}`);\r\n        console.info(`Component: <${state$1.currentComponent._name}>`);\r\n        if (typeof value !== 'undefined') {\r\n            console.info('Value:', value);\r\n        }\r\n        console.groupEnd();\r\n    });\r\n};\r\nconst logSet = (target, prop, value) => {\r\n    debug(() => {\r\n        console.groupCollapsed(`SET: ${extendToUserString(target, prop)}`);\r\n        console.info('From:', getValue(target, prop));\r\n        console.info('To:  ', value);\r\n        console.groupEnd();\r\n    });\r\n};\r\nconst logDelete = (target, prop) => {\r\n    debug(() => {\r\n        console.groupCollapsed(`DELETE: ${extendToUserString(target, prop)}`);\r\n        console.info('Property: ', extendToUserString(target, prop));\r\n        console.groupEnd();\r\n    });\r\n};\r\nconst logUpdate = (component, propsUpdated) => {\r\n    debug(() => {\r\n        console.groupCollapsed(`UPDATE:  <${component._name}>`);\r\n        console.info('Changed properties:', propsUpdated);\r\n        console.groupEnd();\r\n    });\r\n};\r\nconst getComponentsAndListeners = (componentFirst, matcher, makeName) => {\r\n    const result = {};\r\n    Array.from(state$1.listeners).forEach(([path, componentSet]) => {\r\n        componentSet.forEach((component) => {\r\n            var _a;\r\n            let componentName = component._name;\r\n            if (makeName) {\r\n                componentName += (_a = makeName(component.props)) !== null && _a !== void 0 ? _a : '';\r\n            }\r\n            const userPath = internalToUser(path);\r\n            const prop = componentFirst ? componentName : userPath;\r\n            const value = componentFirst ? userPath : componentName;\r\n            if (matcher && !prop.match(matcher))\r\n                return;\r\n            if (!result[prop])\r\n                result[prop] = [];\r\n            if (!result[prop].includes(value))\r\n                result[prop].push(value);\r\n        });\r\n    });\r\n    return result;\r\n};\r\n/**\r\n * Return an object where the keys are component names and the values are\r\n * arrays of the store properties the component is subscribed to\r\n */\r\nconst getListenersByComponent = (matcher, makeName) => getComponentsAndListeners(true, matcher, makeName);\r\n/**\r\n * Return an object where the keys are store properties and the values are\r\n * the names of the components that listen to the property\r\n */\r\nconst getComponentsByListener = (matcher, makeName) => getComponentsAndListeners(false, matcher, makeName);\n\nexport { debug, debugOff, debugOn, getComponentsByListener, getListenersByComponent, logDelete, logGet, logSet, logUpdate };\n"]},"metadata":{},"sourceType":"module"}