{"ast":null,"code":"const hasLocalStorage = typeof window !== 'undefined' && !!window.localStorage;\n\nconst set = (key, data) => {\n  if (!hasLocalStorage) return undefined;\n\n  try {\n    const string = typeof data === 'string' ? data : JSON.stringify(data);\n    return localStorage.setItem(key, string);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nconst get = key => {\n  if (!hasLocalStorage) return undefined;\n  const data = localStorage.getItem(key);\n  if (!data) return data;\n\n  try {\n    return JSON.parse(data);\n  } catch (err) {\n    // So we return whatever we've got on a failure\n    // E.g. the data could be a plain string, which errors on JSON.parse.\n    return data;\n  }\n};\n\nexport { get, set };","map":{"version":3,"sources":["/Users/kyle.snow/node_modules/react-recollect/dist/esm/development/shared/ls.js"],"names":["hasLocalStorage","window","localStorage","set","key","data","undefined","string","JSON","stringify","setItem","err","get","getItem","parse"],"mappings":"AAAA,MAAMA,eAAe,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,CAAC,CAACA,MAAM,CAACC,YAAlE;;AACA,MAAMC,GAAG,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AACvB,MAAI,CAACL,eAAL,EACI,OAAOM,SAAP;;AACJ,MAAI;AACA,UAAMC,MAAM,GAAG,OAAOF,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAjD;AACA,WAAOH,YAAY,CAACQ,OAAb,CAAqBN,GAArB,EAA0BG,MAA1B,CAAP;AACH,GAHD,CAIA,OAAOI,GAAP,EAAY;AACR,WAAOL,SAAP;AACH;AACJ,CAVD;;AAWA,MAAMM,GAAG,GAAIR,GAAD,IAAS;AACjB,MAAI,CAACJ,eAAL,EACI,OAAOM,SAAP;AACJ,QAAMD,IAAI,GAAGH,YAAY,CAACW,OAAb,CAAqBT,GAArB,CAAb;AACA,MAAI,CAACC,IAAL,EACI,OAAOA,IAAP;;AACJ,MAAI;AACA,WAAOG,IAAI,CAACM,KAAL,CAAWT,IAAX,CAAP;AACH,GAFD,CAGA,OAAOM,GAAP,EAAY;AACR;AACA;AACA,WAAON,IAAP;AACH;AACJ,CAdD;;AAgBA,SAASO,GAAT,EAAcT,GAAd","sourcesContent":["const hasLocalStorage = typeof window !== 'undefined' && !!window.localStorage;\r\nconst set = (key, data) => {\r\n    if (!hasLocalStorage)\r\n        return undefined;\r\n    try {\r\n        const string = typeof data === 'string' ? data : JSON.stringify(data);\r\n        return localStorage.setItem(key, string);\r\n    }\r\n    catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\nconst get = (key) => {\r\n    if (!hasLocalStorage)\r\n        return undefined;\r\n    const data = localStorage.getItem(key);\r\n    if (!data)\r\n        return data;\r\n    try {\r\n        return JSON.parse(data);\r\n    }\r\n    catch (err) {\r\n        // So we return whatever we've got on a failure\r\n        // E.g. the data could be a plain string, which errors on JSON.parse.\r\n        return data;\r\n    }\r\n};\n\nexport { get, set };\n"]},"metadata":{},"sourceType":"module"}